from sklearn.utils.extmath import randomized_svd
import numpy as np
import numpy as np
import networkx as nx
from collections import deque
from numpy.linalg import svd

class CompressTree:
    def __init__(self,matrix, row_min, row_max, col_min, col_max):
        self.matrix = matrix
        self.row_min = row_min
        self.row_max = row_max
        self.col_min = col_min
        self.col_max = col_max


        self.leaf = False
        '''
         UL | UR
        ----+----
         DL | DR

        '''
        self.childs = [[None, None], [None, None]]

    def make_leaf(self, U, Sigma, V):
            self.leaf = True
            self.u = U
            self.s = Sigma
            self.v = V

    def create_tree(self, r, epsylon):

        U, Sigma, V = randomized_svd(self.matrix[self.row_min:self.row_max, self.col_min: self.col_max], n_components=r)
        if self.row_max <= self.row_min + 2*r + 1:
            self.make_leaf(U, Sigma, V)
        elif Sigma[r-1] <= epsylon:
            self.make_leaf(U, Sigma, V)
        else:
            rows = [self.row_min, (self.row_min + self.row_max)//2, self.row_max]
            cols = [self.col_min, (self.col_min + self.col_max)//2, self.col_max]
            for i in range(2):
                for j in range(2):
                    self.childs[i][j] = CompressTree(self.matrix, rows[i], rows[i+1], cols[j], cols[j+1])
                    self.childs[i][j].create_tree(r, epsylon)
    def decompress(self, dest_matrix):
        if self.leaf:
            r = len(self.s)
            sigma = np.zeros((r,r))
            np.fill_diagonal(sigma, self.s)
            dest_matrix[self.row_min:self.row_max, self.col_min: self.col_max] = self.u @ sigma @ self.v

        else:
            for i in range(2):
                for j in range(2):
                    self.childs[i][j].decompress(dest_matrix)

    def compare(self, new_matrix):
        return np.sum(np.square(self.matrix - new_matrix))

    def compute_compression(self):
        if self.leaf:
            x = self.row_max - self.row_min
            y = self.col_max - self.col_min
            n = len(self.s)
            area = 2*n*len(self.u)+n
            return area, (x * y)
        suma = 0
        sumaxy = 0
        for v in self.childs:
            for child in v:
                area, xy = child.compute_compression()
                suma += area
                sumaxy += xy
        return suma, sumaxy

def minimum_degree_permutation(matrix):
    n,m = matrix.shape
    ADJ = {i:set() for i in range(n)}
    for i in range(n):
        for j in range(m):
            if matrix[i][j] != 0 and i != j:
                ADJ[i].add(j)
    permutation = []
    for i in range(n):
        deg_min = m+1
        for v, adj in ADJ.items():
            if len(adj) < deg_min:
                v_min = v
                deg_min = len(adj)
        for v in ADJ:
            ADJ[v] = ADJ[v].difference([v_min])
        for u in ADJ[v_min]:
            ADJ[u] = (ADJ[u].union(ADJ[v_min].difference([u])))
        ADJ.pop(v_min)
        permutation.append(v_min)
    return permutation

def cuthill_mckee(matrix):

    def BFS():
        while Q:
            v = Q.popleft()
            if Visited[v]:
                continue
            permutation.append(v)
            Visited[v] = True
            for u in sorted(nx.neighbors(G, v), key = lambda x : G.degree(x)):
                if not Visited[u]:
                    Q.append(u)
    n = len(matrix)

    G = nx.Graph()
    G.add_nodes_from(range(n))

    for i in range(n):
        for j in range(n):
            if matrix[i][j] != 0 and i != j:
                G.add_edge(i, j)

    permutation = []
    Visited = [False for i in range(n)]
    sorted_nodes = sorted([x for x in G.degree()], key = lambda x : x[1])
    # print(sorted_nodes)
    sorted_nodes = list(map(lambda x : x[0], sorted_nodes))
    Q = deque()
    for s in sorted_nodes:
        if not Visited[s]:
            Q.append(s)
            BFS()



    return permutation

def reversed_cuthill_mckee(matrix):
    return cuthill_mckee(matrix)[::-1]

def permutate(matrix, permutation):
    new_matrix = matrix.copy()
    for i in range(len(permutation)):
        if i == permutation[i]:
            continue
        new_matrix[i,:] = matrix[permutation[i],:].copy()

    matrix = new_matrix.copy()
    for i in range(len(permutation)):
        if i == permutation[i]:
            continue
        new_matrix[:,i] = matrix[:,permutation[i]].copy()

    return new_matrix


